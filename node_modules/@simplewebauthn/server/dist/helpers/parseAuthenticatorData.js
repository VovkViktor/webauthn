"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cbor_1 = __importDefault(require("cbor"));
const decodeCbor_1 = require("./decodeCbor");
/**
 * Make sense of the authData buffer contained in an Attestation
 */
function parseAuthenticatorData(authData) {
    if (authData.byteLength < 37) {
        throw new Error(`Authenticator data was ${authData.byteLength} bytes, expected at least 37 bytes`);
    }
    let pointer = 0;
    const rpIdHash = authData.slice(pointer, (pointer += 32));
    const flagsBuf = authData.slice(pointer, (pointer += 1));
    const flagsInt = flagsBuf[0];
    const flags = {
        up: !!(flagsInt & 0x01),
        uv: !!(flagsInt & 0x04),
        at: !!(flagsInt & 0x40),
        ed: !!(flagsInt & 0x80),
        flagsInt,
    };
    const counterBuf = authData.slice(pointer, (pointer += 4));
    const counter = counterBuf.readUInt32BE(0);
    let aaguid = undefined;
    let credentialID = undefined;
    let credentialPublicKey = undefined;
    if (flags.at) {
        aaguid = authData.slice(pointer, (pointer += 16));
        const credIDLenBuf = authData.slice(pointer, (pointer += 2));
        const credIDLen = credIDLenBuf.readUInt16BE(0);
        credentialID = authData.slice(pointer, (pointer += credIDLen));
        // Decode the next CBOR item in the buffer, then re-encode it back to a Buffer
        const firstDecoded = decodeCbor_1.decodeCborFirst(authData.slice(pointer));
        const firstEncoded = Buffer.from(cbor_1.default.encode(firstDecoded));
        credentialPublicKey = firstEncoded;
        pointer += firstEncoded.byteLength;
    }
    let extensionsDataBuffer = undefined;
    if (flags.ed) {
        const firstDecoded = decodeCbor_1.decodeCborFirst(authData.slice(pointer));
        const firstEncoded = Buffer.from(cbor_1.default.encode(firstDecoded));
        extensionsDataBuffer = firstEncoded;
        pointer += firstEncoded.byteLength;
    }
    // Pointer should be at the end of the authenticator data, otherwise too much data was sent
    if (authData.byteLength > pointer) {
        throw new Error('Leftover bytes detected while parsing authenticator data');
    }
    return {
        rpIdHash,
        flagsBuf,
        flags,
        counter,
        counterBuf,
        aaguid,
        credentialID,
        credentialPublicKey,
        extensionsDataBuffer,
    };
}
exports.default = parseAuthenticatorData;
//# sourceMappingURL=parseAuthenticatorData.js.map