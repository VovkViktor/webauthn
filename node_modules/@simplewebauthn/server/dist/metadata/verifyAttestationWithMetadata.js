"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const convertCertBufferToPEM_1 = __importDefault(require("../helpers/convertCertBufferToPEM"));
const validateCertificatePath_1 = __importDefault(require("../helpers/validateCertificatePath"));
/**
 * Match properties of the authenticator's attestation statement against expected values as
 * registered with the FIDO Alliance Metadata Service
 */
async function verifyAttestationWithMetadata(statement, alg, x5c) {
    // Make sure the alg in the attestation statement matches one of the ones specified in metadata
    const statementCOSEAlgs = new Set();
    statement.authenticationAlgorithms.forEach(algSign => {
        // Convert algSign string to { kty, alg, crv }
        const algSignCOSEINFO = algSignToCOSEInfo(algSign);
        if (algSignCOSEINFO) {
            statementCOSEAlgs.add(algSignCOSEINFO.alg);
        }
    });
    if (!statementCOSEAlgs.has(alg)) {
        const debugAlgs = Array.from(statementCOSEAlgs).join(', ');
        throw new Error(`Attestation alg "${alg}" did not match metadata auth algs [${debugAlgs}]`);
    }
    try {
        await validateCertificatePath_1.default(x5c.map(convertCertBufferToPEM_1.default), statement.attestationRootCertificates.map(convertCertBufferToPEM_1.default));
    }
    catch (err) {
        throw new Error(`Could not validate certificate path with any metadata root certificates`);
    }
    return true;
}
exports.default = verifyAttestationWithMetadata;
/**
 * Convert ALG_SIGN values to COSE info
 * https://fidoalliance.org/specs/common-specs/fido-registry-v2.1-ps-20191217.html#authentication-algorithms
 */
function algSignToCOSEInfo(algSign) {
    switch (algSign) {
        case 'secp256r1_ecdsa_sha256_raw':
        case 'secp256r1_ecdsa_sha256_der':
            return { kty: 2, alg: -7, crv: 1 };
        case 'rsassa_pss_sha256_raw':
        case 'rsassa_pss_sha256_der':
            return { kty: 3, alg: -37 };
        case 'secp256k1_ecdsa_sha256_raw':
        case 'secp256k1_ecdsa_sha256_der':
            return { kty: 2, alg: -7, crv: 8 };
        case 'rsassa_pss_sha384_raw':
            return { kty: 3, alg: -38 };
        case 'rsassa_pkcsv15_sha256_raw':
            return { kty: 3, alg: -257 };
        case 'rsassa_pkcsv15_sha384_raw':
            return { kty: 3, alg: -258 };
        case 'rsassa_pkcsv15_sha512_raw':
            return { kty: 3, alg: -259 };
        case 'rsassa_pkcsv15_sha1_raw':
            return { kty: 3, alg: -65535 };
        case 'secp384r1_ecdsa_sha384_raw':
            return { kty: 2, alg: -35, crv: 2 };
        case 'secp512r1_ecdsa_sha256_raw':
            return { kty: 2, alg: -36, crv: 3 };
        case 'ed25519_eddsa_sha512_raw':
            return { kty: 1, alg: -8, crv: 6 };
        // TODO: COSE info in FIDO Registry v2.1 isn't readily available for these, these seem rare...
        // case 'sm2_sm3_raw':
        //   return {};
        // case 'rsa_emsa_pkcs1_sha256_raw':
        // case 'rsa_emsa_pkcs1_sha256_der':
        //   return {};
        default:
            return undefined;
    }
}
//# sourceMappingURL=verifyAttestationWithMetadata.js.map