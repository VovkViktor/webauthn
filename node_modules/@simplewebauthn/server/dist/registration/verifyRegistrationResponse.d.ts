/// <reference types="node" />
import { RegistrationCredentialJSON, COSEAlgorithmIdentifier } from '@simplewebauthn/typescript-types';
import { AttestationFormat, AttestationStatement } from '../helpers/decodeAttestationObject';
export declare type VerifyRegistrationResponseOpts = {
    credential: RegistrationCredentialJSON;
    expectedChallenge: string;
    expectedOrigin: string | string[];
    expectedRPID?: string | string[];
    requireUserVerification?: boolean;
    supportedAlgorithmIDs?: COSEAlgorithmIdentifier[];
};
/**
 * Verify that the user has legitimately completed the registration process
 *
 * **Options:**
 *
 * @param credential Authenticator credential returned by browser's `startAuthentication()`
 * @param expectedChallenge The base64url-encoded `options.challenge` returned by
 * `generateRegistrationOptions()`
 * @param expectedOrigin Website URL (or array of URLs) that the registration should have occurred on
 * @param expectedRPID RP ID (or array of IDs) that was specified in the registration options
 * @param requireUserVerification (Optional) Enforce user verification by the authenticator
 * (via PIN, fingerprint, etc...)
 * @param supportedAlgorithmIDs Array of numeric COSE algorithm identifiers supported for
 * attestation by this RP. See https://www.iana.org/assignments/cose/cose.xhtml#algorithms
 */
export default function verifyRegistrationResponse(options: VerifyRegistrationResponseOpts): Promise<VerifiedRegistrationResponse>;
/**
 * Result of registration verification
 *
 * @param verified If the assertion response could be verified
 * @param registrationInfo.fmt Type of attestation
 * @param registrationInfo.counter The number of times the authenticator reported it has been used.
 * Should be kept in a DB for later reference to help prevent replay attacks
 * @param registrationInfo.aaguid Authenticator's Attestation GUID indicating the type of the
 * authenticator
 * @param registrationInfo.credentialPublicKey The credential's public key
 * @param registrationInfo.credentialID The credential's credential ID for the public key above
 * @param registrationInfo.credentialType The type of the credential returned by the browser
 * @param registrationInfo.userVerified Whether the user was uniquely identified during attestation
 * @param registrationInfo.attestationObject The raw `response.attestationObject` Buffer returned by
 * the authenticator
 */
export declare type VerifiedRegistrationResponse = {
    verified: boolean;
    registrationInfo?: {
        fmt: AttestationFormat;
        counter: number;
        aaguid: string;
        credentialPublicKey: Buffer;
        credentialID: Buffer;
        credentialType: string;
        userVerified: boolean;
        attestationObject: Buffer;
    };
};
/**
 * Values passed to all attestation format verifiers, from which they are free to use as they please
 */
export declare type AttestationFormatVerifierOpts = {
    aaguid: Buffer;
    attStmt: AttestationStatement;
    authData: Buffer;
    clientDataHash: Buffer;
    credentialID: Buffer;
    credentialPublicKey: Buffer;
    rootCertificates: string[];
    rpIdHash: Buffer;
    verifyTimestampMS?: boolean;
};
